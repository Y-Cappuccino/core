from pelix.ipopo.decorators import  BindField, UnbindField,Instantiate, Requires, Provides, ComponentFactory, Property, Validate, Invalidate
import asyncio
from ycappuccino.api.proxy import Proxy
from ycappuccino.api.executor_service import execute_async_in_thread
from ycappuccino.core.services.base.configuration import Configuration


@ComponentFactory("ConfigurationFactory")
@Provides(specifications=["Configuration","IConfiguration","YCappuccinoComponent"], controller="controller")

@Property("file_name","file_name","config.properties")
@Instantiate("{0}")
class ConfigurationFactoryIpopo(Proxy):

    def __int__(self):
        super().__init__()
        self._context = None
        self.controller = False
        self.file_name = None

    async def _start(self):
        await self._obj.start()
        self.controller = True

    async def _stop(self):
        await self._obj.stop()
        self.controller = False

    @Validate
    def validate(self, context):
        self._objname = "{1}"
        self._obj = Configuration(self.file_name)
        self._obj._ipopo = self
        self._context = context
        execute_async_in_thread(self._start)

    @Invalidate
    def in_validate(self, context):
        execute_async_in_thread(self._stop)
        self._objname = None
        self._obj = None
        self._context = None
